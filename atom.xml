<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://stevenXu1992.github.io</id>
    <title>Gridea</title>
    <updated>2020-04-19T13:13:38.170Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://stevenXu1992.github.io"/>
    <link rel="self" href="https://stevenXu1992.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://stevenXu1992.github.io/images/avatar.png</logo>
    <icon>https://stevenXu1992.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[二叉树的遍历]]></title>
        <id>https://stevenXu1992.github.io/post/er-cha-shu-de-bian-li/</id>
        <link href="https://stevenXu1992.github.io/post/er-cha-shu-de-bian-li/">
        </link>
        <updated>2020-04-19T13:04:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1-递归遍历">1. 递归遍历</h2>
<pre><code class="language-java">public static class Node{
  public int value;
  public Node left;
  public Node right;
  
  public Node(int data){
    this.value = data;
  }
}

public static void f(Node head){
  if(head == null){
    return;
  }
  //先序遍历操作
  f(head.left);
  //中序遍历操作
  f(head.right);
  //后序遍历操作
}
</code></pre>
<p>二叉树递归遍历的本质：通过树的完整递归序加工而成<br>
完整递归序：1 -&gt; 2 -&gt; 2 -&gt; 2 -&gt; 1 -&gt; 3 -&gt; 3 -&gt; 3 -&gt; 1<br>
先序：第一次来到节点时进行操作 1 -&gt; 2 -&gt; 3<br>
中序：第二次来到节点时进行操作 2 -&gt; 1 -&gt; 3<br>
后序：第三次来到节点时进行操作 2 -&gt; 3 -&gt; 1</p>
<h2 id="2-非递归遍历">2. 非递归遍历</h2>
<h3 id="21-先序遍历">2.1 先序遍历</h3>
<p>遍历顺序：中 --&gt; 左 --&gt; 右，1 -&gt; 2 -&gt; 4 -&gt; 5 -&gt; 3 -&gt; 6 -&gt; 7</p>
<ol>
<li>建立栈结构，压入头节点</li>
<li>从栈中弹出当前节点，并执行遍历操作</li>
<li>先压入弹出节点的右子节点，再压左子节点，重复步骤2直到栈为空</li>
</ol>
<pre><code class="language-java">public static void preUnRecur(Node head){
  if(head != null){
    Stack&lt;Node&gt; stack = new Stack&lt;&gt;();
    stack.add(head);
    while(!stack.isEmpty()){
      head = stack.pop();
      //该处执行遍历操作
      if(head.right != null){
        stack.push(head.right);
      }
      if(head.left != null){
        stack.push(head.left);
      }
    }
  }
}
</code></pre>
<h3 id="22-中序遍历">2.2 中序遍历</h3>
<p>遍历顺序：左 --&gt; 中 --&gt; 右，4 -&gt; 2 -&gt; 5 -&gt; 1 -&gt; 6 -&gt; 3 -&gt; 7</p>
<ol>
<li>建立栈结构，压入头节点</li>
<li>不断将当前节点的左子节点压栈，直到某节点的左子节点为空，此时从栈中弹出该节点并执行遍历操作</li>
<li>若弹出节点的右子节点不为空，重复步骤2；若为空，则继续从栈中弹出下一节点直到栈为空</li>
</ol>
<pre><code class="language-java">public void inUnRecur(Node head){
  if(head != null){
    Stack&lt;Node&gt; stack = new Stack&lt;&gt;();
    Node cur = head;
    while(!stack.isEmpty() || cur != null){
      if(cur != null){
        stack.push(cur);
        cur = cur.left;
      }else{
        cur = stack.pop();
        //此处执行遍历操作
        cur = cur.right;
      }
    }
  }
}
</code></pre>
<h3 id="23-后序遍历">2.3 后序遍历</h3>
<p>遍历顺序：左 --&gt; 右 --&gt; 中，4 -&gt; 5 -&gt; 2 -&gt; 6 -&gt; 7 -&gt; 3 -&gt; 1<br>
类似于先序遍历，按照先左后右的顺序压栈。额外准备一个栈，将弹出节点压入，直到1号栈为空时，将节点依次从2号栈弹出并执行遍历操作。</p>
<pre><code class="language-java">public static void postUnRecur(Node head){
  if(head != null){
    Stack&lt;Node&gt; s1 = new Stack&lt;&gt;();
    Stack&lt;Node&gt; s2 = new Stack&lt;&gt;();
    s1.push(head);
    while(!s1.isEmpty()){
      head = s1.pop();
      s2.push(head);
      if(head.left != null){
        s1.push(head.left);
      }
      if(head.right != null){
        s1.push(head.right);
      }
    }
    while(!s2.isEmpty()){
      head = s2.pop();
      //此处执行遍历操作
    }
  }
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://stevenXu1992.github.io/post/hello-gridea/</id>
        <link href="https://stevenXu1992.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>